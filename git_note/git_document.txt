1.git setup
	$ git config --global user.name "Your Name"
	$ git config --global user.email "email@example.com"
	
2.通过git init命令把这个目录变成Git可以管理的仓库
    添加文件到Git仓库，分两步：
    使用命令git add <file>，注意，可反复多次使用，添加多个文件；
    使用命令git commit -m <message>，完成。

3.要随时掌握工作区的状态，使用git status命令。
			工作区			   暂缓区
untracked   unmodified    	   modified   	 		staged
			git add .		 git commit -m ""
			git diff		git diff --cached
							git reset HEAD <file>

4.git log 可以查看提交历史，以便确定要回退到哪个版本
eg.
$ git log
commit 5a484fb7ec970d5292bfa040fddce5610bfd26e0 (HEAD -> master, origin/master, origin/HEAD)
Author: lunarji <2415970940@qq.com>
Date:   Thu Jul 5 09:43:42 2018 +0800

    add git_document

commit 0f285749649b7e2879e0197e5e11080a539d49cd
Author: 2415970940 <2415970940@QQ.COM>
Date:   Thu Jul 5 09:32:14 2018 +0800

    Delete readme.txt

commit 530feb89710d20597fcdb710ed2079652a6a9eb4
Author: lunarji <2415970940@qq.com>
Date:   Thu Jul 5 01:27:38 2018 +0800

HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，
使用命令git reset --hard commit_id
commit_id 是HEAD^ (上个版本HEAD~1)或者HEAD^^(上上个版本HEAD~2)或者530feb89（类似）

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本

git reflog和git log区别
git log 以往历史
git reflog 删除未来的历史

用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别

5. git checkout -- readme.txt就是让这个文件回到最近一次git commit或git add时的状态。
git add用命令git reset HEAD <file>可以把暂存区的修改撤销掉，即取消git add命令操作

从git add 退回到 staged
git reset HEAD <file>
git checkout -- <file>

6.删除文件
git rm <file>
git commit -m "del<file>"
恢复
git checkout -- <file>

7.远程仓库
在github上建立一个repository名为mynotes
在目录下git clone https://github.com/2415970940/mynotes.git
cd mynotes
本地和远程仓库通过git push和git pull同步

8.分支管理
查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

流程
1.
	$ git checkout -b dev
	Switched to a new branch 'dev'

	$ git checkout -b dev 相当有下面两个命令
	$ git branch dev
	$ git checkout dev
	Switched to branch 'dev'
2、
	$ git branch
	* dev
	  master
	 当前分支前面会标一个*号
	$ git add readme.txt 
	$ git commit -m "branch test"
	[dev b17d20e] branch test
	 1 file changed, 1 insertion(+)
3切换master
	$ git checkout master
	Switched to branch 'master'
4合并
	$ git merge dev
	Updating d46f35e..b17d20e
	Fast-forward
	 readme.txt | 1 +
	 1 file changed, 1 insertion(+)	
	 要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
	 git merge --no-ff -m "merge with no-ff" dev
5删除分支dev	
	$ git branch -d dev
	Deleted branch dev (was b17d20e).
	$ git branch
	* master
用git log --graph命令可以看到分支合并图

当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
git branch -D <name>强行删除

远程仓库和分支

    查看远程库信息，使用git remote -v；

    本地新建的分支如果不推送到远程，对其他人就是不可见的；

    从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；

    在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；

    建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；

    从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。
	
标签管理


    命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；

    命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；

    命令git tag可以查看所有标签。
	git show <tagname>查看标签信息
	标签总是和某个commit挂钩
