shell programming
1.静态语言  C,C++,JAVA,C#
  动态语言	PHP,SHELL,PYTHON
2.变量
本地变量 varname=value  整个bash进程
局部变量 local varname=value  当前代码段
环境变量 export varname=value 当前shell及其子进程
引用变量 ${varname}
位置变量 $1,$2
		shift [n]  切换$1,$2,$3,$4

特殊变量 $?上一个命令执行状态返回值
一个程序有两个返回值，执行结果和执行状态结果（0，正确；1-255，错误执行）
$# 给出参数个数
$* 参数列表
$@ 参数列表

撤销变量 unset varname
查看当前shell变量 set
查看当前shell环境变量  printenv  ; env  ; export


脚本在执行中会启动一个子shell进程
命令行中期待的脚本会继承当前shell环境变量
系统自动执行的脚本（非命令行启动），需自我定义环境变量

/dev/null 软件设备 bit bucket

写个脚本
（1）添加5个用户，user1,...,user5.每个用户密码和用户名相同，在passwd命令中不显示

3.条件判断
整数比较
-eq  =
-en	!=
-lt  <
-gt	 >
-le  <=
-ge  >=
若用户不存在，添加并给密码，否则显示已存在
! id user1 &> /dev/null && useradd user1 && echo "user1"|passwd --stdin user1 || echo "user1 exist."
UID=0是管理员，否则普通用户
#!/usr/bin/bash

NAME=user1
USERID=`id -u $NAME`
[ $USERID -eq 0 ] && echo "superroot" || echo "general user"


./usersu.sh: line 3: NAME: command not found
错误原因  NAME = user1
正确写法  NAME=user1

if[$STR1=$STR2](错误写法)

if [ $STR1 = $STR2 ](正确写法)

if 
then
	echo
else
	echo
fi

if ...
  then
elif ...
then
elif ...
then
else ...
fi

			练习
			1.有多少用户默认为bash，并显示其中一个用户
			#!/usr/bin/bash
			#
			if grep "bash$" /etc/passwd
			then
			  NUM=`grep "bash$" /etc/passwd | wc -l`
			  USER=`grep "bash$" /etc/passwd | head -1 |cut -d: -f1`
			  echo "$NUM users use bash"
			  echo "$USER"
			fi

			2./etc/inittab中是否有空白行，有显示行数，无输出结果
			#!/usr/bin/bash
			#
			if grep "#^$" /etc/inittab
			then
			  NUM=`grep "^$" /etc/inittab | wc -l`
			  echo "the blank is $NUM"
			else
			  echo "no blank"
			fi
			3.history命令总条目是否大于1000，是“some command will gone”
			history | tail -1 | cut -d' ' -f2



算术运算
A=2
B=3
C=?
1. let C=$A+$B
2. C = $[$A+$B]
3. C = $(($A+$B))
4.expr      C=`expr $A + $B`

定义退出状态码
exit 0-255 提前退出
显示echo $?
显示0 正常退出

4.文件测试
-e FILE: 是否存在
-f FILE: 是否为普通文件
-d FILE: 是否目录
-r       读
-w		 写	
-x		 执行

[ ! -e /etc/inittab ]

bash -n [file]  测试脚本文件语法
bash -x [file]  单步赋值

练习 若文件是普通文件显示，若是目录显示，否则无法识别
#!/usr/bin/bash
#
FILE=/etc/inittabf

if [ ! -e $FILE ];then
  echo "$FILE no exist."
  exit 6
fi

if [ -f $FILE ];then
  echo "$FILE is common file."
elif [ -d $FILE ];then
  echo "$FILE is directory."
else
  echo "unknown"
fi

练习，给脚本传递两个整数，显示之和，之积
#!/usr/bin/bash
#
if [ $# -lt 2 ];then
  echo "Usage :./calculate.sh arg1 arg2"
  exit
elif [ $# -gt 2 ];then
  echo "Usage :./calculate.sh arg1 arg2"
  exit
else
  echo "result:"
fi


let sum=$1+$2
let multi=$1*$2
echo "sum is $sum"
echo "multi is $multi"

5.字符串测试
==
!=
>
<
-n string    string是否为空，空为真
-s string    string是否为空，空为假
练习
传递三个参数，第一个整数，第二个运算符，第三个是整数，显示结果保留两位精度

			#!/usr/bin/bash
			#
			echo $1,$2,$3,$4,$5
			if [ $# -lt 3 ];then
			  echo "Usage:./calc.sh arg1 arg2 arg3"
			  exit 1
			elif [ $# -gt 3 ];then
			  echo "Usage:./calc.sh arg1 arg2 arg3"
			  exit 1
			else
			  echo "result:"
			fi

			a=$1
			b=$2
			c=$3

			if [ $2 == '+' ];then
			  result=$[$a+$c]
			elif [ $2 == '-' ];then
			  result=$[$a-$c]
			elif [ $2 == '*' ];then
			  result=$[$a*$c]
			elif [ $2 == '/' ];then
			  echo "scale=2;$a/$c;"|bc
			else
			  echo "arg2 must be +,_,*,/"
			  exit 1
			fi

			echo "scale=2;$result;"|bc

判断主机cpu生产商，其信息在/proc/cpuinfo中vendor id 一行
AuthenticAMD  AMD
GenuineIntel  Intel

			#!/usr/bin/bash
			#
			result1=`cat /proc/cpuinfo | grep -o "GenuineIntel"|uniq`
			result2=`cat /proc/cpuinfo | grep -o "AuthenticAMD"|uniq`
			if [ $result1 = "GenuineIntel" ];then
			  echo "Intel"
			elif [ $result2 = "AuthenticAMD" ];then
			  echo "AMD"
			else
			  echo "unkown"
			fi

传递三个参数整数，判断最大和最小，显示出来
			#!/usr/bin/bash
			#
			echo $1,$2,$3
			if [ $# -lt 3 ];then
			  echo "Usage:./calc.sh arg1 arg2 arg3"
			  exit 1
			elif [ $# -gt 3 ];then
			  echo "Usage:./calc.sh arg1 arg2 arg3"
			  exit 1
			else
			  echo "result:"
			fi

			max=0

			if [ $max -lt $1 ];then
			  max=$1
			fi

			if [ $max -lt $2 ];then
			  max=$2
			fi

			if [ $max -lt $3 ];then
			  max=$3
			fi

			echo "MAX:$max"

			min=$1

			if [ $1 -gt $2 ];then
			  min=$2
			fi


			if [ $min -gt $3 ];then
			  min=$3
			fi

			echo "MIN:$min"

for循环，while，until
for 变量 in 列表:do
   ...
done

seq start step end
{1..100}
1到100之和
		#!/usr/bin/bash
		#
		sum=0
		for i in `seq 100`
		do
		  sum=$[$sum+$i]
		done

		echo $sum
		

declare -i sum=0  
-i  整型
-x  环境变量

练习
1。向每个用户问好显示shell。统计用户个数，扩展bash用户
			#!/usr/bin/bash
			#
			lines=`wc -l /etc/passwd|cut -d' ' -f1`
			echo "users:$lines"

			for i in `seq $lines`
			do
			  echo "hello,`cat /etc/passwd | head -n $i | tail -1 | cut -d: -f1,7`"
			done

			bashline=`cat /etc/passwd |grep "bash"| cut -d: -f1,7|wc -l`
			echo "bash:$bashline users"
			for i in `seq $bashline`
			do
			  echo "hello,`cat /etc/passwd | grep 'bash'| head -n $i | tail -1 | cut -d: -f1,7`"
			done
100以内被3整除的正整数的和
			#!/usr/bin/bash
			#
			sum=0

			for i in `seq 100`;do
			  if [ $[$i%3] -eq 0 ];then
				echo $i
				sum=$[$sum+$i]
			  fi
			done

			echo $sum

